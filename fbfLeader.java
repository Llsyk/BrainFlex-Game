
import java.awt.Image;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Thant Zin
 */
public class fbfLeader extends javax.swing.JFrame {
    String names[];
    String pname;
    String minutes;
    String seconds;
    String counts;
    String level;
    int length;

    static void quickSort1(int[] time, int i, int i0) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    /**
     * Creates new form fbfLeader
     */
    public fbfLeader() {
        initComponents();
        Icon i = lblImage.getIcon();
        ImageIcon icon = (ImageIcon)i;
        Image image = icon.getImage().getScaledInstance(lblImage.getWidth(), lblImage.getHeight(), Image.SCALE_SMOOTH);
        lblImage.setIcon(new ImageIcon(image));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        lblImage = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Match = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(153, 185, 250));

        jLabel1.setBackground(new java.awt.Color(223, 141, 32));
        jLabel1.setFont(new java.awt.Font("STHupo", 1, 24)); // NOI18N
        jLabel1.setText("Level 4 * 4 Ranking table");

        jButton2.setBackground(new java.awt.Color(223, 141, 32));
        jButton2.setFont(new java.awt.Font("STHupo", 0, 18)); // NOI18N
        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(223, 141, 32));
        jButton1.setFont(new java.awt.Font("STHupo", 0, 18)); // NOI18N
        jButton1.setText("3*3");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        lblImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Screenshot__28_-removebg-preview.png"))); // NOI18N

        jComboBox1.setBackground(new java.awt.Color(223, 141, 32));
        jComboBox1.setFont(new java.awt.Font("STHupo", 0, 18)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Alphabetical", "Max to Min", "Min to Max" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jTable1.setBackground(new java.awt.Color(153, 153, 255));
        jTable1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTable1.setFont(new java.awt.Font("STHupo", 0, 15)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Serial no.", "Player Name", "Minutes", "Seconds", "Counts"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setGridColor(new java.awt.Color(51, 204, 0));
        jTable1.setRowHeight(40);
        jTable1.setRowMargin(5);
        jTable1.setShowGrid(true);
        jTable1.setShowVerticalLines(false);
        jScrollPane1.setViewportView(jTable1);

        Match.setBackground(new java.awt.Color(223, 141, 32));
        Match.setFont(new java.awt.Font("STHupo", 0, 18)); // NOI18N
        Match.setText("Matching");
        Match.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MatchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 131, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Match, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(129, 129, 129))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Match, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(44, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
               
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/number_puzzle","root","");
            Statement ps1 = con.createStatement();
            ResultSet rs;
            
            rs = ps1.executeQuery("select * from fourbyfour");
            
            int i=0;
            while(rs.next()){
                i += 1;
                String ranking = String.valueOf(i);
                String pname = rs.getString("name");
                String minutes = String.valueOf(rs.getInt("minutes"));
                String seconds = String.valueOf(rs.getInt("seconds"));
                String counts = String.valueOf(rs.getInt("counts"));
                String level = rs.getString("level");
                String tbData[] = {ranking,pname,minutes,seconds,counts,level};
                DefaultTableModel leaderboard = (DefaultTableModel)jTable1.getModel();
                leaderboard.addRow(tbData);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Puzzle_level.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Puzzle_level.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowActivated

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.setVisible(false);
        tbtLeaderboard t =  new tbtLeaderboard();
        t.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.setVisible(false);
        leaderboard t =  new leaderboard();
        t.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void MatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MatchActionPerformed
        matchLeaderboard mlb = new matchLeaderboard();
        mlb.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_MatchActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        ArrayList<String[]> allData = new ArrayList<>(); // To store all data
        ArrayList<String> allNames = new ArrayList<>();
        ArrayList<Integer> allSeconds = new ArrayList<Integer>();
        try{
            Class.forName("com.mysql.cj.jdbc.Driver");
               
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/number_puzzle","root","");
            Statement ps1 = con.createStatement();
            ResultSet rs;
            
            rs = ps1.executeQuery("select * from fourbyfour");
            
            int i=0;
            while(rs.next()){
                i += 1;
                String ranking = String.valueOf(i);
                String pname = rs.getString("name");
                String minutes = String.valueOf(rs.getInt("minutes"));
                String seconds = String.valueOf(rs.getInt("seconds"));
                String counts = String.valueOf(rs.getInt("counts"));
                String level = rs.getString("level");
                String tbData[] = {ranking,pname,minutes,seconds,counts,level};
                int mintosec = rs.getInt("minutes") * 60;
                String[] rowData = {ranking, pname, minutes, seconds, counts, level};
                allData.add(rowData);
    
    // Add the name to allNames
                allNames.add(pname);
                allSeconds.add(Integer.parseInt(seconds) + mintosec);
                
                
            }
        }catch (ClassNotFoundException ex) {
            Logger.getLogger(Puzzle_level.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Puzzle_level.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        tbtLeaderboard sorter = new tbtLeaderboard();
        String s = jComboBox1.getSelectedItem().toString();
        if (s == "Alphabetical"){
            
            String[] words = allNames.toArray(new String[0]);// the strings needa to be sorted are put inside this array String words[] = {"zz", "aa", "cc", "hh", "bb", "ee", "ll"};
            sorter.sort1(words);
            
            DefaultTableModel leaderboard = (DefaultTableModel) jTable1.getModel();
            leaderboard.setRowCount(0);
       
        //leaderboard.addRow(words);
            int p =0;
        
            for (String name : words) {
                p += 1;
                String ranking = String.valueOf(p);
                for (String[] data : allData) {
                    if (data[1].equals(name)) { // Check if the name matches
                    //rowData = data;
                        Object[] rowData = {ranking,name,data[2],data[3],data[4]};
                        leaderboard.addRow(rowData);
                    //break;
                    }
                }
            //Object[] rowData = {ranking,name};
            
            }
        }
        if (s == "Max to Min"){
            int[] time1 = new int[allSeconds.size()];
            for (int k=0; k< allSeconds.size(); k++){
                time1[k] = allSeconds.get(k);
            }
            Arrays.sort(time1);
            for (int a = 0; a < time1.length / 2; a++) {
            int temp = time1[a];
            time1[a] = time1[time1.length - 1 - a];
            time1[time1.length - 1 - a] = temp;
            }
            DefaultTableModel leaderboard = (DefaultTableModel) jTable1.getModel();
            leaderboard.setRowCount(0);
            int b =0;
            String[] names = new String[allNames.size()];
            int c = 0;
            int i = 0;
            for (int sec : time1) {
            b += 1;
            String ranking = String.valueOf(b);
            String sec1 = Integer.toString(sec);
            for (String[] data : allData) {
                int minAndsec = Integer.parseInt(data[3]) +( Integer.parseInt(data[2])*60);
                String minAndsec2 = Integer.toString(minAndsec);
                for (int x=0; x<c; x++){
                    i = 0;
                    if (names[x].equals(data[1]) ){
                    i = 1;
                    }
                    }
                if (minAndsec2.equals(sec1) && i!=1) { // Check if the name matches
                    //rowData = data;
                    names[c] = data[1];
                    Object[] rowData = {ranking,data[1],data[2],data[3],data[4]};
                    leaderboard.addRow(rowData);
                    break;
                }
            }
            //Object[] rowData = {ranking,name};
            c += 1;
        }
        }
        if (s == "Min to Max"){
            //int[] time =allSeconds.toArray(new int[0])
            int[] time = new int[allSeconds.size()];
            for (int k=0; k< allSeconds.size(); k++){
                time[k] = allSeconds.get(k);
            }
            int size = time.length;
            tbtLeaderboard.quickSort(time, 0, size - 1);
            DefaultTableModel leaderboard = (DefaultTableModel) jTable1.getModel();
            leaderboard.setRowCount(0);
            int l =0;
            String[] names = new String[allNames.size()];
            int c = 0;
            int i = 0;
            for (int sec : time) {
            
            l += 1;
            String ranking = String.valueOf(l);
            String sec1 = Integer.toString(sec);
            for (String[] data : allData) {
                
                int minAndsec = Integer.parseInt(data[3]) +( Integer.parseInt(data[2])*60);
                String minAndsec2 = Integer.toString(minAndsec);
                for (int x=0; x<c; x++){
                    i = 0;
                    if (names[x].equals(data[1]) ){
                    i = 1;
                    }
                    }
                if (minAndsec2.equals(sec1) && i!=1 ) { // Check if the name matches
                    //rowData = data;
                    names[c] = data[1];
                    Object[] rowData = {ranking,data[1],data[2],data[3],data[4]};
                    leaderboard.addRow(rowData);
                    
                    break;
                }
                
            }
            
            //Object[] rowData = {ranking,name};
            c += 1;
        }
            
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(fbfLeader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(fbfLeader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(fbfLeader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(fbfLeader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new fbfLeader().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Match;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblImage;
    // End of variables declaration//GEN-END:variables
    void sort(String[] words) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
    void sort1(String array[]) {
        if (array == null || array.length == 0) {
            return;
        }
        this.names = array;
        this.length = array.length;
        quickSort(0, length - 1);
    }

    void quickSort(int lowerIndex, int higherIndex) {
        int i = lowerIndex;
        int j = higherIndex;
        String pivot = this.names[lowerIndex + (higherIndex - lowerIndex) / 2];

        while (i <= j) {
            while (this.names[i].compareToIgnoreCase(pivot) < 0) {
                i++;
            }

            while (this.names[j].compareToIgnoreCase(pivot) > 0) {
                j--;
            }

            if (i <= j) {
                exchangeNames(i, j);
                i++;
                j--;
            }
        }
        //call quickSort recursively
        if (lowerIndex < j) {
            quickSort(lowerIndex, j);
        }
        if (i < higherIndex) {
            quickSort(i, higherIndex);
        }
    }

    void exchangeNames(int i, int j) {
        String temp = this.names[i];
        this.names[i] = this.names[j];
        this.names[j] = temp;
        
    }
    
    static int partition(int array[], int low, int high) {
    
    // choose the rightmost element as pivot
    int pivot = array[high];
    
    // pointer for greater element
    int i = (low - 1);

    // traverse through all elements
    // compare each element with pivot
    for (int j = low; j < high; j++) {
      if (array[j] <= pivot) {

        // if element smaller than pivot is found
        // swap it with the greater element pointed by i
        i++;

        // swapping element at i with element at j
        int temp = array[i];
        array[i] = array[j];
        array[j] = temp;
      }

    }

    // swapt the pivot element with the greater element specified by i
    int temp = array[i + 1];
    array[i + 1] = array[high];
    array[high] = temp;

    // return the position from where partition is done
    return (i + 1);
    }
    
    static void quickSort(int array[], int low, int high) {
    if (low < high) {

      // find pivot element such that
      // elements smaller than pivot are on the left
      // elements greater than pivot are on the right
      int pi = partition(array, low, high);
      
      // recursive call on the left of pivot
      quickSort(array, low, pi - 1);

      // recursive call on the right of pivot
      quickSort(array, pi + 1, high);
    }
  }

}
